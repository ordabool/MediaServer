server {
    listen 80;
    listen [::]:80;

    client_max_body_size 20M;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    auth_basic           "Private Server";
    auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

    location = / {
        auth_basic off;
        return 302 http://$host/web/;
    }

    location / {
        auth_basic off;
        proxy_pass http://jellyfin:8096;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        proxy_buffering off;
    }

    location = /web/ {
        auth_basic off;
        proxy_pass http://jellyfin:8096/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        auth_basic off;
        proxy_pass http://jellyfin:8096;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
    
    location /movies/ {
        proxy_pass http://radarr:7878/movies/;
    }

    location /tv/ {
        proxy_pass http://sonarr:8989/tv/;
    }

    location /subs/ {
        proxy_pass http://bazarr:6767/subs/;
    }

    location /comics/ {
        proxy_pass http://mylar3:8090/comics/;
    }

    location /books/ {
        proxy_pass http://readarr:8787/books/;
    }

    location /music/ {
        proxy_pass http://lidarr:8686/music/;
    }

    location /sources/ {
        proxy_pass http://prowlarr:9696/sources/;
    }

    location /downloads/ {
        proxy_pass         http://qbittorrent:8080/;
        proxy_http_version 1.1;

        proxy_set_header   Host               127.0.0.1:8080;
        proxy_set_header   X-Forwarded-Host   $http_host;
        proxy_set_header   X-Forwarded-For    $remote_addr;

        # not used by qBittorrent
        #proxy_set_header   X-Forwarded-Proto  $scheme;
        #proxy_set_header   X-Real-IP          $remote_addr;

        # optionally, you can adjust the POST request size limit, to allow adding a lot of torrents at once
        #client_max_body_size 100M;

        # Since v4.2.2, is possible to configure qBittorrent
        # to set the "Secure" flag for the session cookie automatically.
        # However, that option does nothing unless using qBittorrent's built-in HTTPS functionality.
        # For this use case, where qBittorrent itself is using plain HTTP
        # (and regardless of whether or not the external website uses HTTPS),
        # the flag must be set here, in the proxy configuration itself.
        # Note: If this flag is set while the external website uses only HTTP, this will cause
        # the login mechanism to not work without any apparent errors in console/network resulting in "auth loops".
        # proxy_cookie_path  /                  "/; Secure";
    }
}

 server {
        listen 80;
        listen [::]:80;

        auth_basic           "Private Server";
        auth_basic_user_file /etc/nginx/conf.d/.htpasswd;
        
        server_name tc.*;
        location / {
            proxy_pass http://unmanic:8888/;
        }

        location /unmanic/websocket {
            proxy_pass http://unmanic:8888;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Protocol $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
        }
 }