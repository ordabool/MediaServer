version: "2"

services:
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM}
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ${PLEX_CONFIG_PATH}:/config
      - ${DATA_PATH}:/data
    restart: always
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${SONARR_CONFIG_PATH}:/config
      - ${DATA_PATH}:/data
    ports:
      - 8989:8989
    restart: always

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${RADARR_CONFIG_PATH}:/config
      - ${DATA_PATH}:/data
    ports:
      - 7878:7878
    restart: always

  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${BAZARR_CONFIG_PATH}:/config
      - ${DATA_PATH}:/data
    ports:
      - 6767:6767
    restart: always

  prowlarr:
    image: linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    volumes:
      - ${PROWLARR_CONFIG_PATH}:/config
    ports:
      - 9696:9696
    restart: always

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    ports:
      - 8191:8191
    restart: always

  qbittorrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=002
      - WEBUI_PORT=8080
    volumes:
      - ${QBITTORRENT_CONFIG_PATH}:/config
      - ${DATA_PATH}:/data
    ports:
      - 49427:49427
      - 49427:49427/udp
      - 8080:8080
    restart: always
    # default username/password is admin/adminadmin

  tdarr:
    image: haveagitgat/tdarr_aio
    container_name: tdarr
    ports:
    -  8265:8265
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
    - ${TDARR_CONFIG_PATH}/config:/home/Tdarr/Documents/Tdarr
    - ${TDARR_CONFIG_PATH}/db:/var/lib/mongodb
    - ${TDARR_TRANSCODE_PATH}:/home/Tdarr/cache
    - ${TDARR_OUTPUT_PATH}:/home/Tdarr/output
    - /etc/localtime:/etc/localtime:ro
    - ${DATA_PATH}:/data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  server:
    image: nginx
    restart: always
    container_name: mediaserver
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    container_name: certbot
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  sphinx:
    container_name: sphinx
    build: ./sphinx
    volumes:
      - ./sphinx:/sphinx
      - ./build:/build
    command: sphinx-autobuild -a --host 0.0.0.0 --port 8000 /sphinx/source /build
    ports:
      - 7000:8000

  filebrowser:
    # Default username & pass are 'admin'
    image: hurlenko/filebrowser
    container_name: filebrowser
    ports:
      - 7654:8080
    volumes:
      - ${DATA_PATH}:/data
      - ${FILEBROWSER_CONFIG_PATH}:/config
    environment:
      - FB_BASEURL=/filebrowser
    restart: always

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${OVERSEERR_CONFIG_PATH}:/config
    ports:
      - 5055:5055
    restart: always

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: audiobookshelf
    ports:
      - 13378:80
    volumes:
      - ${DATA_PATH}:/data
      - ${AUDIOBOOKSHELF_METADATA_PATH}:/metadata
      - ${AUDIOBOOKSHELF_CONFIG_PATH}:/config
    restart: always
    environment:
     - user=${PUID}:${PGID}

  private_qbittorrent:
    image: linuxserver/qbittorrent
    container_name: private_qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=002
      - WEBUI_PORT=3003
    volumes:
      - ${PRIVATE_QBITTORRENT_CONFIG_PATH}:/config
      - ${DATA_PATH}:/data
    ports:
      - 64702:64702
      - 64702:64702/udp
      - 3003:3003
    restart: always

  # Defaults - Username: admin Password: admin123
  calibre-fiction:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-fiction
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CALIBRE_WEB_CONFIG_PATH}/fiction:/config
      - ${DATA_PATH}:/data
    restart: always

  calibre-nonfiction:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-nonfiction
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CALIBRE_WEB_CONFIG_PATH}/nonfiction:/config
      - ${DATA_PATH}:/data
    restart: always

  calibre-ttrpg:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-ttrpg
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CALIBRE_WEB_CONFIG_PATH}/ttrpg:/config
      - ${DATA_PATH}:/data
    restart: always

  calibre-textbooks:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-textbooks
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CALIBRE_WEB_CONFIG_PATH}/textbooks:/config
      - ${DATA_PATH}:/data
    restart: always

  calibre-manga:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-manga
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CALIBRE_WEB_CONFIG_PATH}/manga:/config
      - ${DATA_PATH}:/data
    restart: always

  calibre-comics:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-comics
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CALIBRE_WEB_CONFIG_PATH}/comics:/config
      - ${DATA_PATH}:/data
    restart: always

  # RustDesk servers
  hbbs:
    container_name: hbbs
    image: rustdesk/rustdesk-server:latest
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    command: hbbs
    volumes:
      - ${RUSTDESK_CONFIG_PATH}:/root
    network_mode: "host"
    depends_on:
      - hbbr
    restart: unless-stopped

  hbbr:
    container_name: hbbr
    image: rustdesk/rustdesk-server:latest
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    command: hbbr
    volumes:
      - ${RUSTDESK_CONFIG_PATH}:/root
    network_mode: "host"
    restart: unless-stopped

  # Owlbear Rodeo Legacy VTT
  bvtt:
    build: ./owlbear-rodeo-legacy/backend/
    container_name: bvtt
    stop_grace_period: 30s
    init: true
    ports: 
      - 9000:9000
    environment:
      PORT: 9000
      ALLOW_ORIGIN: ".*"

  vtt:
    container_name: vtt
    build: 
      context: ./owlbear-rodeo-legacy/
    depends_on:
      - bvtt
    ports:
      - 3000:3000
    environment:
      REACT_APP_BROKER_URL: "https://bvtt.jellybeb.com"
      REACT_APP_VERSION: "1.10.2"
      REACT_APP_MAINTENANCE: "false"
